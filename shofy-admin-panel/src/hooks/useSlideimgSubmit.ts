import { notifySuccess, notifyError } from "@/utils/toast";
//This is a React hook generated by Redux Toolkit from your addCategory endpoint. 
//Itâ€™s used in your components to make the request to the backend.
//addCategory is the logic of your API (what the backend should do).
//useAddCategoryMutation is the hook in your frontend, which is how you interact with the 
//addCategory logic to make the actual request from your component.
//src/redux/slider/slideimgApi.ts
//Calling useAddSliderImageMutation: Inside a component, you invoke
//useAddSliderImageMutation() to get the function (addSliderImage) and related state 
//(e.g., isLoading, isError).
import { useAddSliderImageMutation, useEditSliderImageMutation } from "@/redux/slider/slideimgApi";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { useRouter } from 'next/navigation'

const useSlideimgSubmit = () => {
  //State Initialization: The useState hook is used to define the slideimgImg state and 
  //setSlideimgImg function to update the state.
// const [slideimgImg, setSlideimgImg] = useState<string>(""); // Initial state is 
// an empty string. The setSlideimgImg function updates the slideimgImg state with the 
// secure_url when it's received from the SlideimgImgUpload component of file add-slideimg.tsx
  const [slideimgImg, setSlideimgImg] = useState<string>("");
  const [parent, setParent] = useState<string>("");
  const [description, setDescription] = useState<string>("");
  const [error, setError] = useState<string>("");
  const [selectProductType, setSelectProductType] = useState<string>("");
  const [slideimgChildren, setSlideimgChildren] = useState<string[]>([]);
  const [isSubmitted, setIsSubmitted] = useState<boolean>(false);
  const router = useRouter();
  
  // add
//const [addSliderImage, { isLoading, isError, error }] = useAddSliderImageMutation();
//addSliderImage: This is the function you call to trigger the API request. It accepts 
//the data you want to send to the backend (e.g., the image details).
//isLoading: Shows if the request is in progress.
//isError: Indicates if there was an error with the request.
//error: Holds the error details if isError is true.
  const [
    addSlideimg,
    { data: slideimgData, isError, isLoading, error: addSlideErr },
  ] = useAddSliderImageMutation();
  
  // edit
  const [
    editSlideimg,
    { data: editSlideData, isError: editErr, isLoading: editLoading, error: editSlideErr },
  ] = useEditSliderImageMutation();

  // react hook form
  const {
    register,
    handleSubmit,
    setValue,
    control,
    formState: { errors },
    reset,
  } = useForm();

  
 // handleSubmitSlideimg gathers the form data (e.g., image, product type, description).
// The data is then sent to the backend via the addSlideimg mutation.
// If successful, the form is reset, and a success message is shown.
// If there's an error, an error message is displayed.
// In AddSlideimg (importing and filling values):
  const handleSubmitSlideimg = async (data: any) => {
    try {
      //slideimg_data object is constructed with the following fields
      const slideimg_data = {
        img: slideimgImg,
        parent: data?.parent,
        description: data?.description,
        productType: data?.productType?.value,
        children: slideimgChildren,
      };
     //The addSlideimg function is called with the slideimg_data object.
     //This function likely makes a network request to add the slide image in the backend. 
      const res = await addSlideimg({ ...slideimg_data });
      if ("error" in res) {
        if ("data" in res.error) {
          const errorData = res.error.data as { message?: string };
          if (typeof errorData.message === "string") {
            return notifyError(errorData.message);
          }
        }
      } else {
        notifySuccess("Slideimg added successfully");
        setIsSubmitted(true);
        reset();
        setSlideimgChildren([]);
        setSlideimgImg("");
      }
    } catch (error) {
      console.log(error);
      notifyError("Something went wrong");
    }
  };
  
  //handle Submit edit Slideimg
  const handleSubmitEditSlideimg = async (data: any, id: string) => {
    try {
      const slideimg_data = {
        img: slideimgImg,
        parent: data?.parent,
        description: data?.description,
        productType: data?.productType?.value,
        children: slideimgChildren,
      };
      const res = await editSlideimg({ id, data: slideimg_data });
      if ("error" in res) {
        if ("data" in res.error) {
          const errorData = res.error.data as { message?: string };
          if (typeof errorData.message === "string") {
            return notifyError(errorData.message);
          }
        }
      } else {
        notifySuccess("Slideimg updated successfully");
        router.push('/slideimg');
        setIsSubmitted(true);
        reset();
      }
    } catch (error) {
      console.log(error);
      notifyError("Something went wrong");
    }
  };

  return {
    selectProductType,
    setSelectProductType,
    register,
    handleSubmit,
    setValue,
    errors,
    control,
    slideimgImg,
    setSlideimgImg,
    parent,
    setParent,
    description,
    setDescription,
    slideimgChildren,
    setSlideimgChildren,
    handleSubmitSlideimg,
    error,
    isSubmitted,
    handleSubmitEditSlideimg,
  };
};

export default useSlideimgSubmit;
