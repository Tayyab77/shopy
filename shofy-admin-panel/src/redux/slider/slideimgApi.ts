// This page is Built in TypeScript to define type-safe API interaction within a React application.
// Uses RTK Query to manage state and API interactions effectively.

import { apiSlice } from "../api/apiSlice";
import {
  SlideimgResponse,
  IAddSlideimg,
  IAddSlideimgResponse,
  ISlideimgDeleteRes,
} from "@/types/slider-type";

export const authApi = apiSlice.injectEndpoints({
  overrideExisting: true,
  endpoints: (builder) => ({
    // Get all slider images
    getAllSliderImages: builder.query<SlideimgResponse, void>({
      query: () => `/api/slideimg/all`,
      providesTags: ["AllSliderImages"],
      keepUnusedDataFor: 600,
    }),
    // Add a new slider image
    //The url: '/api/slideimg/add' is defined within the addSliderImage mutation in 
    //the authApi object. This is the endpoint path on the backend where the image data 
    //will be
    // sent. The addSliderImage is endpoint mutation is responsible for sending the POST request to 
    ///api/slideimg/add, which will handle the logic of adding a new slider image to the 
    //database on the backend.
    //Triggering the API Call: When you call addSliderImage({ imageData }), 
    //it sends the request to the backend at /api/slideimg/add with the specified 
    //imageData in the body.
    //o	RTK Query dispatches actions under the hood for the query lifecycle
    //(pending, fulfilled, rejected).
//Example: When useGetAllSliderImagesQuery fetches fresh data, it triggers the 
//fulfilled action.
//1.Backend response hits addProduct mutation(in productAPI) → triggers invalidatesTags: 
//['AllProducts'].
//2.Redux Toolkit detects invalidated AllProducts tag → refetches useGetAllProductsQuery 

//Below one is API endpoints
    addSliderImage: builder.mutation<IAddSlideimgResponse, IAddSlideimg>({
      query(data: IAddSlideimg) {
        return {
         //API endpoint path
          url: `/api/slideimg/add`,
          method: "POST",
          body: data,
        };
      },
      invalidatesTags: ["AllSliderImages"],
    }),
    // Delete a slider image
    deleteSliderImage: builder.mutation<ISlideimgDeleteRes, string>({
      query(id: string) {
        return {
          url: `/api/slideimg/delete/${id}`,
          method: "DELETE",
        };
      },
      invalidatesTags: ["AllSliderImages"],
    }),
    // Edit a slider image
    editSliderImage: builder.mutation<IAddSlideimgResponse, { id: string; data: Partial<IAddSlideimg> }>({
      query({ id, data }) {
        return {
          url: `/api/slideimg/edit/${id}`,
          method: "PATCH",
          body: data,
        };
      },
      invalidatesTags: ["AllSliderImages"],
    }),
    // Get a single slider image by ID
    getSliderImage: builder.query<IAddSlideimg, string>({
      query: (id) => `/api/slideimg/get/${id}`,
      providesTags: ["getSliderImage"],
    }),
  }),
});

// Export hooks generated by RTK Query
//To understand the functionality of Redux API Hooks, let's break down how RTK Query 
//works when generating hooks like useGetAllSliderImagesQuery, useAddSliderImageMutation, 
//etc., from your authApi object. Here's the flow:
//A Redux API Hook is a custom hook generated by RTK Query from an API slice (like your 
//authApi) to allow components to interact with your backend APIs
//In authApi, you're using apiSlice.injectEndpoints to define multiple API endpoints 
//like getAllSliderImages, addSliderImage, deleteSliderImage, editSliderImage, and 
//getSliderImage.
//Each of these endpoints is configured with specific HTTP methods (GET, POST, DELETE, PATCH) 
//and a target URL.These endpoints are described using queries and mutations:
//Query: Used for fetching data (e.g., getAllSliderImages and getSliderImage).
//Mutation: Used for modifying data (e.g., addSliderImage, deleteSliderImage, editSliderImage).
//What happens when apiSlice.injectEndpoints runs?
//It generates Redux API hooks based on the configuration you provide for each endpoint.
//These hooks are:
// useGetAllSliderImagesQuery: For getting all slider images.
// useAddSliderImageMutation: For adding a new slider image.
// useDeleteSliderImageMutation: For deleting a slider image.
// useEditSliderImageMutation: For editing a slider image.
// useGetSliderImageQuery: For getting a single slider image by ID.
//This hook automatically triggers a GET request to the server and updates the Redux 
//store with the response data. It will re-render the component with the updated data once 
//the request completes.

// 1.Mutation (useAddSliderImageMutation): When you call this hook, it sends a POST 
// request to /api/slideimg/add with the image data.

// 2.Backend Process: The backend processes the data (e.g., saving it in the database or 
// uploading to a cloud service like Cloudinary).
// When Backend response hits addSliderImage mutation(in slideimgAPI) → triggers invalidatesTags: 
//['AllProducts'].
// 3.Invalidates Tags: Once the data is added, RTK Query invalidates the tag "AllSliderImages".
// This means the cached data for the "all slider images" is no longer valid.

// 4.Re-fetch with useGetAllSliderImagesQuery: RTK Query will automatically trigger the 
// useGetAllSliderImagesQuery to fetch the updated list of all slider images from the backend. 
//It then updates the Redux store with the latest data.
// Notification to Components:
// Any React component using the useGetAllSliderImagesQuery hook automatically gets 
// notified that new data is available in the Redux store. For example our slideimg-tables.tsx 
// comprise useGetAllSliderImagesQuery and once data will updated in store automatically 
// will be updated in slideimg-tables.tsx

export const {
  useGetAllSliderImagesQuery,
  useAddSliderImageMutation,
  useDeleteSliderImageMutation,
  useEditSliderImageMutation,
  useGetSliderImageQuery,
} = authApi;


